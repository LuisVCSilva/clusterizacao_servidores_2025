# Envoy Proxy config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-envoy
  namespace: default
data:
  envoy.yaml: >
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 5001
        use_original_dst: true
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              codec_type: auto
              generate_request_id: true
              access_log:
              - name: envoy.file_access_log
                config:
                  path: "/dev/stdout"
              tracing:
                operation_name: ingress
              stat_prefix: ingress_http
              route_config:
                name: flask_route
                virtual_hosts:
                - name: flask
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: flask
                    decorator:
                      operation: flask-envoy-ingress
              http_filters:
              - name: envoy.router
                config: {}
      # Upstream configuration
      # https://www.envoyproxy.io/docs/envoy/v1.10.0/api-v2/api/v2/cds.proto
      clusters:
      - name: flask
        connect_timeout: 0.250s
        type: static
        lb_policy: round_robin
        health_checks:
        - timeout: 5s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 1
          tcp_health_check: {}
        hosts:
        - socket_address:
            address: 127.0.0.1
            port_value: 5000
    admin:
      access_log_path: "/var/log/admin-access.log"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flaskapp
  name: flaskapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flaskapp
  template:
    metadata:
      labels:
        app: flaskapp
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - image: albertoal/flask_webapp:0.3
        name: flaskapp
        env:
        - name: FLASK_APP
          value: "app.py"
        # Change to development to enable debug mode
        - name: FLASK_ENV
          value: "production"
        ports:
        - containerPort: 5000
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 100m
            memory: 256Mi
        readinessProbe:
          httpGet:
            path: /ready
            port: 5001
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /alive
            port: 5001
          initialDelaySeconds: 20
          periodSeconds: 5
      - name: envoy
        image: envoyproxy/envoy:v1.10.0
        command: ["envoy"]
        args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: envoy-yaml
          mountPath: /etc/envoy.yaml
          subPath: envoy.yaml
      volumes:
      - name: envoy-yaml
        configMap:
          name: flask-envoy
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: flaskapp
  labels:
    app: flaskapp
spec:
  type: NodePort
  ports:
  - port: 80
    protocol: TCP
    name: http
    targetPort: 5001
  selector:
    app: flaskapp
